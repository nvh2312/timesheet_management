import {
    CallHandler,
    ExecutionContext,
    NestInterceptor,
    UseInterceptors,
} from '@nestjs/common';
import {
    ClassConstructor,
    plainToInstance,
    instanceToPlain,
} from 'class-transformer';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

export function Serialize<T>(dto: ClassConstructor<T>) {
    return UseInterceptors(new SerializeInterceptor(dto));
}

export class SerializeInterceptor<T> implements NestInterceptor {
    constructor(private dto: ClassConstructor<T>) { }

    intercept(
        context: ExecutionContext,
        next: CallHandler<any>,
    ): Observable<T> | Promise<Observable<T>> {
        // run something before a request is handled
        // by the request handler
        return next.handle().pipe(
            map((data: T) => {
                // run something before the response is sent out
                const transformedData = plainToInstance(this.dto, data, {
                    excludeExtraneousValues: true,
                  });

                  return instanceToPlain(transformedData) as T
            }),
        );
    }
}